00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.14.00
Created On: 2/27/2014 9:06:12 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      :Brandon's Mini Disassembler
00000000                             3  * Written by :Brandon Roth
00000000                             4  * Date       :2/23/2014
00000000                             5  * Description:Disassembles and stuff!
00000000                             6  *-----------------------------------------------------------
00001000                             7  START   ORG $1000   *Start program at provided location
00001000  =00007FC0                  8  ST_ADDR EQU $7FC0   *Starting address of input test file
00001000  =00007000                  9  STACK   EQU $7000   *Stack location
00001000                            10  
00001000  307C 7FC0                 11          MOVEA.W #ST_ADDR,A0 *Load starting location of test input file into A0
00001004  43F9 0000105A             12          LEA     MESSAGE,A1  *Loads MESSAGE into address register A1
0000100A  103C 000E                 13          MOVE.B  #14,D0      *Moves the number 14 into data register D0
0000100E  4E4F                      14          TRAP    #15         *Displays Message
00001010                            15          
00001010                            16  *-----------------------------------------------------------        
00001010                            17  * Start of Mini Disassembler
00001010                            18  *-----------------------------------------------------------        
00001010                            19  
00001010                            20  GRAB_NEXT_OP
00001010                            21          *Move byte data at (A0) into D0. D0 is now the first 8 bits of the first
00001010                            22          *OP instruction from the test input file
00001010  4280                      23          CLR.L   D0
00001012  1010                      24          MOVE.B  (A0),D0
00001014                            25          *Clear the first 4 bits from 8 bit value in D0. I am doing this so we retain
00001014                            26          *just the last 4 bits. These LAST 4 bits are FIRST 4 bits the of the first OP
00001014                            27          *CODE. By using only the first 4 bits of an instruction, we can begin to
00001014                            28          *narrow down which particular OP code the instruction actually is!
00001014                            29          *BCLR.L  #$00,D0 
00001014                            30          *BCLR.L  #$01,D0
00001014                            31          *BCLR.L  #$02,D0
00001014                            32          *BCLR.L  #$03,D0
00001014                            33          *Now I need to shift these 4 bit values right by 4 bits, so that these 4 bits
00001014                            34          *are in the LSB position. Then I can begin to compare this value with others 
00001014                            35          *and start decoding this OP CODE.
00001014  E848                      36          LSR.W   #$04,D0
00001016                            37          *Now try to figure out what OP CODE this is using these 4 bits.        
00001016                            38          *Later I will not try to go directly to op codes, but to a 'category' of
00001016                            39          *potential codes it could be (since many share the same first 4 bits).
00001016                            40  
00001016                            41  *Decode a NOP OP--------------------------------------------
00001016  =00000004                 42  NOP_OP  EQU $04 *Store as byte, but I really only care about first 4 bits
00001016                            43  
00001016  4281                      44          CLR.L   D1
00001018  123C 0004                 45          MOVE.B  #NOP_OP,D1  *Load the first 4 bits (really a byte) of NOP into D1
0000101C                            46          *Compare the first 4 bits of the first OP CODE with first 4 of NOP. 
0000101C                            47          *If equal we have a NOP instruction. Branch to 'ISNOP' and decode the rest.
0000101C  B200                      48          CMP.B   D0,D1
0000101E  6700 0006                 49          BEQ     ISNOP
00001022                            50          
00001022                            51  *Decode a MOVE OP-------------------------------------------
00001022                            52  *MOVEOP EQU %00 *First two bits of move are always 00
00001022                            53          *MOVE.B  (A0),D0     *Move the byte data at A0 into D0 (**i really want only 4 bits...)
00001022                            54          
00001022                            55          
00001022                            56          *We didn't find a valid OP CODE from given instruction, go to next OP in mem
00001022  4EF8 1010                 57          JMP     GRAB_NEXT_OP
00001026                            58          
00001026                            59  *Verify valid NOP syntax------------------------------------
00001026                            60  ISNOP   
00001026  =00004E71                 61  NOPALL  EQU $4E71   *The entire NOP instruction equals this constant hex value
00001026  1010                      62          MOVE.B  (A0),D0 *Move the WHOLE instruction from mem into D0
00001028  323C 4E71                 63          MOVE.W  #NOPALL,D1 *Move the entire NOP instruction into D1
0000102C                            64          *Compare D0 to D1, if equal we found a match, print some message.
0000102C                            65          *If not equal, there was some syntax error, print error message.
0000102C  B240                      66          CMP.W   D0,D1
0000102E  6700 0004                 67          BEQ     CORRECTNOP
00001032  6010                      68          BRA.S   ERRORNOP
00001034                            69  CORRECTNOP
00001034                            70          *Output some message, hey we found a NOP or something...
00001034  43F9 00001084             71          LEA     FOUNDNOP,A1 *Loads FOUNDNOP into address register A1
0000103A  103C 000E                 72          MOVE.B  #14,D0      *Moves the number 14 into data register D0
0000103E  4E4F                      73          TRAP    #15         *Displays Message
00001040  4EF8 1010                 74          JMP     GRAB_NEXT_OP    *Jump and go to the next instruction
00001044                            75  ERRORNOP
00001044                            76          *Output some error message, hey incorrect NOP syntax or something...
00001044  43F9 00001098             77          LEA     BADNOP,A1   *Loads BADNOP into address register A1
0000104A  103C 000E                 78          MOVE.B  #14,D0      *Moves the number 14 into data register D0
0000104E  4E4F                      79          TRAP    #15         *Displays Message
00001050  4EF8 1010                 80          JMP     GRAB_NEXT_OP    *Jump and go to the next instruction
00001054                            81          
00001054                            82  *Verify valid MOVE syntax-----------------------------------
00001054                            83  *ISMOVE  *is a move instruction, try to decode rest.
00001054                            84          
00001054                            85  *-----------------------------------------------------------        
00001054                            86  * End of Mini Disassembler
00001054                            87  *-----------------------------------------------------------    
00001054                            88          
00001054  103C 0009                 89  THEEND  MOVE.B  #9,D0
00001058  4E4F                      90          TRAP    #15             Halt Simulator        
0000105A                            91          
0000105A  =0000000D                 92  CR      EQU     $0D             ASCII code for Carriage Return
0000105A  =0000000A                 93  LF      EQU     $0A             ASCII code for Line Feed
0000105A= 48 65 79 2C 20 67 ...     94  MESSAGE DC.B    'Hey, going to try to disassemble MOVE.B',CR,LF,0
00001084= 48 65 79 2C 20 66 ...     95  FOUNDNOP    DC.B    'Hey, found a NOP!',CR,LF,0
00001098= 48 65 79 2C 20 73 ...     96  BADNOP  DC.B    'Hey, something is wrong with this NOP!',CR,LF,0
000010C1                            97          END     START

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
BADNOP              1098
CORRECTNOP          1034
CR                  D
ERRORNOP            1044
FOUNDNOP            1084
GRAB_NEXT_OP        1010
ISNOP               1026
LF                  A
MESSAGE             105A
NOPALL              4E71
NOP_OP              4
STACK               7000
START               1000
ST_ADDR             7FC0
THEEND              1054
